name: Build and Push Image to AWS ECR

on:
  push:
    tags:
      - 'v*'  

jobs:
  build-and-push:
    name: Build and Push to ECR
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Extract Tag
        id: extract_tag
        run: echo "TAG_NAME=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-southeast-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Create .env file from ENV_DEV secret
        run: |
          echo "${{ secrets.ENV_DEV }}" > .env
          cat .env

      - name: Build, Tag, and Push the Image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: mee-pro-fontend-shop
          IMAGE_TAG: ${{ env.TAG_NAME }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

      - name: Set up SSH key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.ARTIFACT_SSH_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -p 22 ${{ secrets.ARTIFACT_HOST }} >> ~/.ssh/known_hosts
          sudo apt-get install sshpass

      - name: Deploy to server
        env:
          IMAGE_TAG: ${{ env.TAG_NAME }}
        run: |
          sshpass -p '${{ secrets.HOST_PSWD }}' ssh -v -o StrictHostKeyChecking=no ${{ secrets.HOST_USER }}@${{ secrets.HOST_IP }} <<'ENDSSH'
            cd ${{ secrets.HOST_APP_PATH }}
            pwd
            ls -la
            aws ecr get-login-password --region ap-southeast-1 | docker login --username AWS --password-stdin 211125430268.dkr.ecr.ap-southeast-1.amazonaws.com

            export IMAGE_TAG='${{ env.IMAGE_TAG }}'
            echo "IMAGE_TAG=${IMAGE_TAG}" > .env

            docker-compose down
            docker-compose up -d --build
            docker system prune -f
          ENDSSH